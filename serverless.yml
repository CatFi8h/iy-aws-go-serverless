# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: yurchenkodev
service: device-info-service

configValidationMode: error

stages:
  default:
    params:
      tableName: "device-info-${sls:stage}"

provider:
  name: aws
  runtime: provided.al2 
  architecture: arm64   
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  httpApi:
    cors: true
    name: ${self:service}-${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:ListTables
            - dynamodb:PartiQLInsert
          Resource:
            - Fn::GetAtt: [DeviceInfoTable, Arn]
  environment:
    DEVICE_INFO_TABLE: ${param:tableName}

package:
  individually: true 

functions:
  create:
    name: create-device-info
    handler: bootstrap # <- the handler name must be bootstrap and in the root of the zip
    package:
      artifact: build/lambda/create.zip # override the default artifact handling to use the built zip
    events:
      - httpApi:
          path: /device-info
          method: post
  get:
    name: get-device-info
    handler: bootstrap # <- the handler name must be bootstrap and in the root of the zip
    package:
      artifact: build/lambda/get.zip # override the default artifact handling to use the built zip
    events:
      - httpApi:
          path: /device-info/{deviceId}
          method: get

  delete:
    name: delete-device-info
    handler: bootstrap # <- the handler name must be bootstrap and in the root of the zip
    package:
      artifact: build/lambda/delete.zip # override the default artifact handling to use the built zip
    events:
      - httpApi:
          path: /device-info/{deviceId}
          method: delete

  update:
    name: update-device-info
    handler: bootstrap # <- the handler name must be bootstrap and in the root of the zip
    package:
      artifact: build/lambda/update.zip # override the default artifact handling to use the built zip
    events:
      - httpApi:
          path: /device-info/{deviceId}
          method: put
  compute:
    handler: bootstrap
    package:
      artifact: build/lambda/listensns.zip
    events:
      - sqs: 
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn
          batchSize: 1
          maximumBatchingWindow: 30

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}
        VisibilityTimeout: 30
       
    DeviceInfoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: deviceid
            AttributeType: S
        KeySchema:
          - AttributeName: deviceid
            KeyType: HASH
        # ProvisionedThroughput:
        #   ReadCapacityUnits: 1
        #   WriteCapacityUnits: 1
        TableName: ${param:tableName}